data_HVR <- subset(data_HVR, select = -c(Notes, Date.Collected) )
colnames(data_HVR) <- c("File.ID", "Cross", "Animal.ID",
"Cell.Count", "n3CO", "Biv.ID", "IFD")
data_HVR_full <- rbind(data_HVR_P0, data_HVR)
for(h in 1:length(data_HVR_full$File.ID)){
#if col 6 of 7 match and 7th(IFD doesn't ) 3CO
if( (data_HVR_full$File.ID[h] == data_HVR_full$File.ID[h+1]  ) &&
(data_HVR_full$Biv.ID[h]==data_HVR_full$Biv.ID[h+1] ) ){
print(c("double ", h) )
data_HVR_full$n3CO[h] = 1
}
}
View(data_HVR_full)
nonrv <- data_HVR_full$File.ID[!grepl("REV", data_HVR_full$File.ID)]
nonrv <- unique(nonrv) #42 biv measures without REV
nonrv
nonrv2 <- gsub('.tif', '', nonrv)#remove '.tif' for better matching
nonrv2
nonrv <- gsub('.tif', '', nonrv)#remove '.tif' for better matching
BDdata_F2 = read.csv("C:/Users/alpeterson7/Documents/HannahVR/BD_F2_RecombinationPhenotypes.csv", header=TRUE)
BDdata_F2$ANIMAL_ID <- as.factor(BDdata_F2$ANIMAL_ID)
BDdata_P0 = read.csv("C:/Users/alpeterson7/Documents/HannahVR/BD_MLH1_CASTxPWD_P0.csv", header=TRUE)
BD_MLH1_data = rbind(BDdata_F2, BDdata_P0)
BD_MLH1_data$file_name <- do.call(paste, c(BD_MLH1_data[c("ANIMAL_ID", "Slide_ID", "CellNumber")], sep = "_"))
BD_MLH1_data$file_name <- do.call(paste, c(BD_MLH1_data[c("ANIMAL_ID", "Slide_ID", "CellNumber")], sep = "_"))
REV <- subset(BD_MLH1_data$file_name, !(BD_MLH1_data$file_name %in% nonrv) ) #this returns a matrix of T OR F
REV
View(BD_MLH1_data)
length(REV)#same length as full dataframe
BD_MLH1_data$file_name <- paste( (BD_MLH1_data$file_name[!(BD_MLH1_data$file_name %in% nonrv)]) , "_REV.tif", sep="")
View(BD_MLH1_data)
nonrv
IFD_nMLH1 <- merge.data.frame(BD_MLH1_data, data_HVR_full, by.y = "File.ID", by.x = "file_name", all=FALSE)
View(IFD_nMLH1)
unique(IFD_nMLH1$Cross.y)
unique(IFD_nMLH1$Cross.x)
data_HVR_P0 = read.csv("C:/Users/alpeterson7/Documents/HannahVR/HVR_IFD_P0.csv", header=TRUE)
data_HVR_P0$File.ID <- ifelse( grepl("CAST", data_HVR_P0$File.ID), paste(data_HVR_P0$File.ID, ".tif", sep=""),
ifelse(grepl("PWD", data_HVR_P0$File.ID), substring(data_HVR_P0$File.ID, 4),
ifelse(grepl("CXP", data_HVR_P0$File.ID), substring(data_HVR_P0$File.ID, 4), "" ) ) )
colnames(data_HVR_P0) <- c( "File.ID","Cross","Animal.ID",
"Cell.Count", "n3CO", "Biv.ID", "IFD")
for(i in 1:length(data_HVR_P0$File.ID)){
mouse_list = strsplit(as.character(data_HVR_P0$File.ID[i]), split="_")[[1]]
data_HVR_P0$Animal.ID[i] = mouse_list[1]
}
data_HVR = read.csv("C:/Users/alpeterson7/Documents/HannahVR/HVR_IFD_DATA_Sep17.csv", header=TRUE)
data_HVR <- subset(data_HVR, select = -c(Notes, Date.Collected) )
colnames(data_HVR) <- c("File.ID", "Cross", "Animal.ID",
"Cell.Count", "n3CO", "Biv.ID", "IFD")
data_HVR_full <- rbind(data_HVR_P0, data_HVR)
for(h in 1:length(data_HVR_full$File.ID)){
#if col 6 of 7 match and 7th(IFD doesn't ) 3CO
if( (data_HVR_full$File.ID[h] == data_HVR_full$File.ID[h+1]  ) &&
(data_HVR_full$Biv.ID[h]==data_HVR_full$Biv.ID[h+1] ) ){
print(c("double ", h) )
data_HVR_full$n3CO[h] = 1
}
}
View(data_HVR)
data_HVR = read.csv("C:/Users/alpeterson7/Documents/HannahVR/HVR_IFD_DATA_Sep17.csv", header=TRUE)
data_HVR <- subset(data_HVR, select = -c(Notes, Date.Collected) )
colnames(data_HVR) <- c("File.ID", "Cross", "Animal.ID",
"Cell.Count", "n3CO", "Biv.ID", "IFD")
data_HVR_full <- rbind(data_HVR_P0, data_HVR)
data_HVR_P0 = read.csv("C:/Users/alpeterson7/Documents/HannahVR/HVR_IFD_P0.csv", header=TRUE)
data_HVR_P0$File.ID <- ifelse( grepl("CAST", data_HVR_P0$File.ID), paste(data_HVR_P0$File.ID, ".tif", sep=""),
ifelse(grepl("PWD", data_HVR_P0$File.ID), substring(data_HVR_P0$File.ID, 4),
ifelse(grepl("CXP", data_HVR_P0$File.ID), substring(data_HVR_P0$File.ID, 4), "" ) ) )
colnames(data_HVR_P0) <- c( "File.ID","Cross","Animal.ID",
"Cell.Count", "n3CO", "Biv.ID", "IFD")
for(i in 1:length(data_HVR_P0$File.ID)){
mouse_list = strsplit(as.character(data_HVR_P0$File.ID[i]), split="_")[[1]]
data_HVR_P0$Animal.ID[i] = mouse_list[1]
}
data_HVR <- subset(data_HVR, select = -c(Notes, Date.Collected) )
colnames(data_HVR) <- c("File.ID", "Cross", "Animal.ID",
"Cell.Count", "n3CO", "Biv.ID", "IFD")
View(data_HVR)
data_HVR <- subset(data_HVR, select = -c(Notes, Date.Collected) )
View(data_HVR_P0)
data_HVR_P0 = read.csv("C:/Users/alpeterson7/Documents/HannahVR/HVR_IFD_P0.csv", header=TRUE)
data_HVR_P0$File.ID <- ifelse( grepl("CAST", data_HVR_P0$File.ID), paste(data_HVR_P0$File.ID, ".tif", sep=""),
ifelse(grepl("PWD", data_HVR_P0$File.ID), substring(data_HVR_P0$File.ID, 4),
ifelse(grepl("CXP", data_HVR_P0$File.ID), substring(data_HVR_P0$File.ID, 4), "" ) ) )
colnames(data_HVR_P0) <- c( "File.ID","Cross","Animal.ID",
"Cell.Count", "n3CO", "Biv.ID", "IFD")
for(i in 1:length(data_HVR_P0$File.ID)){
mouse_list = strsplit(as.character(data_HVR_P0$File.ID[i]), split="_")[[1]]
data_HVR_P0$Animal.ID[i] = mouse_list[1]
}
data_HVR = read.csv("C:/Users/alpeterson7/Documents/HannahVR/HVR_IFD_DATA_Sep17.csv", header=TRUE)
data_HVR <- subset(data_HVR, select = -c(Notes, Date.Collected) )
colnames(data_HVR) <- c("File.ID", "Cross", "Animal.ID",
"Cell.Count", "n3CO", "Biv.ID", "IFD")
data_HVR_full <- rbind(data_HVR_P0, data_HVR)
for(h in 1:length(data_HVR_full$File.ID)){
#if col 6 of 7 match and 7th(IFD doesn't ) 3CO
if( (data_HVR_full$File.ID[h] == data_HVR_full$File.ID[h+1]  ) &&
(data_HVR_full$Biv.ID[h]==data_HVR_full$Biv.ID[h+1] ) ){
print(c("double ", h) )
data_HVR_full$n3CO[h] = 1
}
}
nonrv <- data_HVR_full$File.ID[!grepl("REV", data_HVR_full$File.ID)]
nonrv <- unique(nonrv) #42 biv measures without REV
nonrv <- gsub('.tif', '', nonrv)#remove '.tif' for better matching
BDdata_F2 = read.csv("C:/Users/alpeterson7/Documents/HannahVR/BD_F2_RecombinationPhenotypes.csv", header=TRUE)
BDdata_F2$ANIMAL_ID <- as.factor(BDdata_F2$ANIMAL_ID)
BDdata_P0 = read.csv("C:/Users/alpeterson7/Documents/HannahVR/BD_MLH1_CASTxPWD_P0.csv", header=TRUE)
BD_MLH1_data = rbind(BDdata_F2, BDdata_P0)
BD_MLH1_data$file_name <- do.call(paste, c(BD_MLH1_data[c("ANIMAL_ID", "Slide_ID", "CellNumber")], sep = "_"))
View(BD_MLH1_data)
REV <- subset(BD_MLH1_data$file_name, !(BD_MLH1_data$file_name %in% nonrv) ) #this returns a matrix of T OR F
length(REV)#same length as full dataframe
BD_MLH1_data$file_name <- paste( (BD_MLH1_data$file_name[!(BD_MLH1_data$file_name %in% nonrv)]) , "_REV.tif", sep="")
IFD_nMLH1 <- merge.data.frame(BD_MLH1_data, data_HVR_full, by.y = "File.ID", by.x = "file_name", all=FALSE)
unique(IFD_nMLH1$Cross.x)
unique(IFD_nMLH1$Cross.y)
View(IFD_nMLH1)
BDdata_F2 = read.csv("C:/Users/alpeterson7/Documents/HannahVR/BD_F2_RecombinationPhenotypes.csv", header=TRUE)
BDdata_F2$ANIMAL_ID <- as.factor(BDdata_F2$ANIMAL_ID)
BDdata_P0 = read.csv("C:/Users/alpeterson7/Documents/HannahVR/BD_MLH1_CASTxPWD_P0.csv", header=TRUE)
BD_MLH1_data = rbind(BDdata_F2, BDdata_P0)
BD_MLH1_data$file_name <- do.call(paste, c(BD_MLH1_data[c("ANIMAL_ID", "Slide_ID", "CellNumber")], sep = "_"))
REV <- subset(BD_MLH1_data$file_name, !(BD_MLH1_data$file_name %in% nonrv) ) #this returns a matrix of T OR F
length(REV)#same length as full dataframe
BD_MLH1_data$file_name <- paste( (BD_MLH1_data$file_name[!(BD_MLH1_data$file_name %in% nonrv)]) , "_REV.tif", sep="")
IFD_nMLH1 <- merge.data.frame(BD_MLH1_data, data_HVR_full, by.y = "File.ID", by.x = "file_name", all=FALSE)
unique(IFD_nMLH1$Cross.x)
unique(IFD_nMLH1$Cross.y)
max(IFD_nMLH1$IFD)
min(IFD_nMLH1$IFD)
View(IFD_nMLH1)
View(BD_MLH1_data)
BD_MLH1_data <- subset(BD_MLH1_data, -c(InchWidth, InchHeight, PixelWidth, PixelWidth, RawDistFromCent,
RawInterXODist, FractDistFromCent, FractInterXODist  ))
BD_MLH1_data <- subset(BD_MLH1_data, select= -c(InchWidth, InchHeight, PixelWidth, PixelWidth, RawDistFromCent,
RawInterXODist, FractDistFromCent, FractInterXODist  ))
category_numbers <- ddply(IFD_nMLH1, .(Cross.x), summarize,
N_IFD  = length(IFD),#number of measurements
#N_IFD_MLH1 = ,
mean_MLH1 = mean(IFD),
var_IFD = var(IFD),#this is very large within mouse
sd_IFD   = sd(IFD)
#se   = sd / sqrt(N)
)
library(plyr)
category_numbers <- ddply(IFD_nMLH1, .(Cross.x), summarize,
N_IFD  = length(IFD),#number of measurements
#N_IFD_MLH1 = ,
mean_MLH1 = mean(IFD),
var_IFD = var(IFD),#this is very large within mouse
sd_IFD   = sd(IFD)
#se   = sd / sqrt(N)
)
category_numbers
category_numbers <- ddply(IFD_nMLH1, .(Cross.x), summarize,
N_mice  = length(unique(Animal.ID)),#number of measurements
#N_IFD_MLH1 = ,
mean_MLH1 = mean(IFD),
var_IFD = var(IFD),#this is very large within mouse
sd_IFD   = sd(IFD)
#se   = sd / sqrt(N)
)
category_numbers
View(BDdata_P0)
View(IFD_nMLH1)
category_numbers_HVR <- ddply(data_HVR_full, .(Cross), summarize,
N_mice  = length(unique(Animal.ID)),#number of measurements
#N_IFD_MLH1 = ,
mean_MLH1 = mean(IFD),
var_IFD = var(IFD),#this is very large within mouse
sd_IFD   = sd(IFD)
#se   = sd / sqrt(N)
)
category_numbers_HVR
category_numbers_BD_full <- ddply(BD_MLH1_data, .(Cross), summarize,
N_mice  = length(unique(Animal.ID)),#number of measurements
#N_IFD_MLH1 = ,
mean_MLH1 = mean(IFD),
var_IFD = var(IFD),#this is very large within mouse
sd_IFD   = sd(IFD)
#se   = sd / sqrt(N)
)
category_numbers_BD_full
category_numbers_BD_full <- ddply(BD_MLH1_data, .(Cross), summarize,
N_mice  = length(unique(ANIMAL.ID)),#number of measurements
#N_IFD_MLH1 = ,
mean_MLH1 = mean(IFD),
var_IFD = var(IFD),#this is very large within mouse
sd_IFD   = sd(IFD)
#se   = sd / sqrt(N)
)
category_numbers_BD_full
View(BD_MLH1_data)
category_numbers_BD_full <- ddply(BD_MLH1_data, .(Cross), summarize,
N_mice  = length(unique(ANIMAL_ID)),#number of measurements
#N_IFD_MLH1 = ,
mean_MLH1 = mean(IFD),
var_IFD = var(IFD),#this is very large within mouse
sd_IFD   = sd(IFD)
#se   = sd / sqrt(N)
)
category_numbers_BD_full <- ddply(BD_MLH1_data, .(Cross), summarize,
N_mice  = length(unique(ANIMAL_ID)),#number of measurements
#N_IFD_MLH1 = ,
# mean_MLH1 = mean(IFD),
# var_IFD = var(IFD),#this is very large within mouse
# sd_IFD   = sd(IFD)
#se   = sd / sqrt(N)
)
category_numbers_BD_full
category_numbers_BD_full <- ddply(BD_MLH1_data, .(Cross), summarize,
N_mice  = length(unique(ANIMAL_ID))#number of measurements
#N_IFD_MLH1 = ,
# mean_MLH1 = mean(IFD),
# var_IFD = var(IFD),#this is very large within mouse
# sd_IFD   = sd(IFD)
#se   = sd / sqrt(N)
)
category_numbers_BD_full
category_numbers_HVR
View(BD_MLH1_data)
unique(BD_MLH1_data$Cross)
unique(BD_MLH1_data$ANIMAL_ID)
data_PWD_BD <- BD_MLH1_data[BD_MLH1_data$Cross == "PWD", ]
unique(data_PWD_BD$ANIMAL_ID)
View(data_HVR_full)
data_PWD_BD <- BD_MLH1_data[BD_MLH1_data$Cross == "PWD", ]
category_numbers_HVR
category_numbers_full
category_numbers_full <- ddply(IFD_nMLH1, .(Cross.x), summarize,
N_mice  = length(unique(Animal.ID)),#number of measurements
#N_IFD_MLH1 = ,
mean_MLH1 = mean(IFD),
var_IFD = var(IFD),#this is very large within mouse
sd_IFD   = sd(IFD)
#se   = sd / sqrt(N)
)
category_numbers_full
category_numbers_HVR
category_numbers_BD_full
data_PWD_HVR <- data_HVR_full[data_HVR_full$Cross == "PWD", ]
unique(data_PWD_HVR$Animal.ID)
View(BD_MLH1_data)
unique(BDdata_P0$ANIMAL_ID)
BD_data = read.csv("C:/Users/alpeterson7/Documents/HannahVR/BD_RecombinationPhenotypes.csv", header=TRUE)
BD_data <- subset(BD_data, select= -c(InchWidth, InchHeight, PixelWidth, PixelWidth, RawDistFromCent,
RawInterXODist, FractDistFromCent, FractInterXODist  ))
BD_MLH1_data$file_name <- do.call(paste, c(BD_MLH1_data[c("ANIMAL_ID", "Slide_ID", "CellNumber")], sep = "_"))
REV <- subset(BD_MLH1_data$file_name, !(BD_MLH1_data$file_name %in% nonrv) ) #this returns a matrix of T OR F
length(REV)#same length as full dataframe
View(BD_data)
BD_MLH1_data$file_name <- paste( (BD_MLH1_data$file_name[!(BD_MLH1_data$file_name %in% nonrv)]) , "_REV.tif", sep="")
IFD_nMLH1 <- merge.data.frame(BD_MLH1_data, data_HVR_full, by.y = "File.ID", by.x = "file_name", all=FALSE)
data_PWD <- IFD_nMLH1[IFD_nMLH1$Cross.x == "PWD", ] #the file names for many PWD don't match
unique(data_PWD$ANIMAL_ID)
BD_MLH1_data$file_name <- do.call(paste, c(BD_MLH1_data[c("ANIMAL_ID", "Slide_ID", "CellNumber")], sep = "_"))
BD_data <- subset(BD_data, select= -c(InchWidth, InchHeight, PixelWidth, PixelWidth, RawDistFromCent,
RawInterXODist, FractDistFromCent, FractInterXODist  ))
BD_data <- subset(BD_data, select= -c(InchHeight, PixelWidth, PixelWidth, RawDistFromCent,
RawInterXODist, FractDistFromCent, FractInterXODist  ))
BD_data <- subset(BD_data, select= -c( PixelWidth, PixelWidth, RawDistFromCent,
RawInterXODist, FractDistFromCent, FractInterXODist  ))
BD_data <- subset(BD_data, select= -c( PixelWidth, RawDistFromCent,
RawInterXODist, FractDistFromCent, FractInterXODist  ))
BD_data <- subset(BD_data, select= -c( PixelHeight, RawDistFromCent,
RawInterXODist, FractDistFromCent, FractInterXODist  ))
BD_data <- subset(BD_data, select= -c( PixelHeight))
BD_data = read.csv("C:/Users/alpeterson7/Documents/HannahVR/BD_RecombinationPhenotypes.csv", header=TRUE)
BD_data <- subset(BD_data, select= -c( PixelHeight))#
BD_data$file_name <- do.call(paste, c(BD_data[c("ANIMAL_ID", "Slide_ID", "CellNumber")], sep = "_"))
unique(BD_data$Cross)
BD_data <- IFD_nMLH1[IFD_nMLH1$Cross.x == c("CXPF2","PxCF1","CxPF2" ) ]
BD_data <- IFD_nMLH1[ (IFD_nMLH1$Cross.x == "CXPF2") | IFD_nMLH1$Cross.x == "PxCF1") ), ]
BD_data <- IFD_nMLH1[( (IFD_nMLH1$Cross.x == "CXPF2") | IFD_nMLH1$Cross.x == "PxCF1") ), ]
BD_data <- IFD_nMLH1[( (IFD_nMLH1$Cross.x == "CXPF2") | (IFD_nMLH1$Cross.x == "PxCF1") ), ]
BD_data = read.csv("C:/Users/alpeterson7/Documents/HannahVR/BD_RecombinationPhenotypes.csv", header=TRUE)
BD_data = read.csv("C:/Users/alpeterson7/Documents/HannahVR/BD_RecombinationPhenotypes.csv", header=TRUE)
BD_data <- IFD_nMLH1[( (IFD_nMLH1$Cross.x == "CXPF2") | (IFD_nMLH1$Cross.x == "PxCF1")
| (IFD_nMLH1$Cross.x == "PxCF1") | (IFD_nMLH1$Cross.x == "PWD")
| (IFD_nMLH1$Cross.x == "CAST") ), ]
unique(BD_data$Cross)
BD_data <- BD_data[( (BD_data$Cross.x == "CXPF2") | (BD_data$Cross.x == "PxCF1")
| (BD_data$Cross.x == "PxCF1") | (BD_data$Cross.x == "PWD")
| (BD_data$Cross.x == "CAST") ), ]
unique(BD_data$Cross)
BD_data = read.csv("C:/Users/alpeterson7/Documents/HannahVR/BD_RecombinationPhenotypes.csv", header=TRUE)
BD_data <- BD_data[( (BD_data$Cross == "CXPF2") | (BD_data$Cross == "PxCF1")
| (BD_data$Cross == "PxCF1") | (BD_data$Cross == "PWD")
| (BD_data$Cross == "CAST") ), ]
unique(BD_data$Cross)
BD_data = read.csv("C:/Users/alpeterson7/Documents/HannahVR/BD_RecombinationPhenotypes.csv", header=TRUE)
BD_data <- BD_data[( (BD_data$Cross == "CxPF2") | (BD_data$Cross == "PxCF1")
| (BD_data$Cross == "PxCF1") | (BD_data$Cross == "PWD")
| (BD_data$Cross == "CAST") ), ]
unique(BD_data$Cross)
BD_data = read.csv("C:/Users/alpeterson7/Documents/HannahVR/BD_RecombinationPhenotypes.csv", header=TRUE)
BD_data <- BD_data[( (BD_data$Cross == "CxPF2") | (BD_data$Cross == "PxCF1")
| (BD_data$Cross == "PxCF1") | (BD_data$Cross == "PWD")
| (BD_data$Cross == "CAST") | (BD_data$Cross == "PxCF2")   ), ]
unique(BD_data$Cross)
category_numbers_full <- ddply(IFD_nMLH1, .(Cross.x), summarize,
N_mice  = length(unique(Animal.ID)),#number of measurements
#N_IFD_MLH1 = ,
mean_MLH1 = mean(IFD),
var_IFD = var(IFD),#this is very large within mouse
sd_IFD   = sd(IFD)
#se   = sd / sqrt(N)
)
category_numbers_full #currently there is just one PWD, there should be
category_numbers_HVR <- ddply(data_HVR_full, .(Cross), summarize,
N_mice  = length(unique(Animal.ID)),#number of measurements
#N_IFD_MLH1 = ,
mean_MLH1 = mean(IFD),
var_IFD = var(IFD),#this is very large within mouse
sd_IFD   = sd(IFD)
#se   = sd / sqrt(N)
)
category_numbers_HVR
category_numbers_BD_full <- ddply(BD_MLH1_data, .(Cross), summarize,
N_mice  = length(unique(ANIMAL_ID))#number of measurements
#N_IFD_MLH1 = ,
# mean_MLH1 = mean(IFD),
# var_IFD = var(IFD),#this is very large within mouse
# sd_IFD   = sd(IFD)
#se   = sd / sqrt(N)
)
category_numbers_BD_full
category_numbers_BD_full <- ddply(BD_data, .(Cross), summarize,
N_mice  = length(unique(ANIMAL_ID))#number of measurements
#N_IFD_MLH1 = ,
# mean_MLH1 = mean(IFD),
# var_IFD = var(IFD),#this is very large within mouse
# sd_IFD   = sd(IFD)
#se   = sd / sqrt(N)
)
category_numbers_BD_full
BD_data = read.csv("C:/Users/alpeterson7/Documents/HannahVR/BD_RecombinationPhenotypes.csv", header=TRUE)
category_numbers_BD_full <- ddply(BD_data, .(Cross), summarize,
N_mice  = length(unique(ANIMAL_ID))#number of measurements
#N_IFD_MLH1 = ,
# mean_MLH1 = mean(IFD),
# var_IFD = var(IFD),#this is very large within mouse
# sd_IFD   = sd(IFD)
#se   = sd / sqrt(N)
)
category_numbers_BD_full
BD_data <- BD_data[( (BD_data$Cross == "CxPF2") | (BD_data$Cross == "PxCF1")
| (BD_data$Cross == "CZECHI") | (BD_data$Cross == "PWD")
| (BD_data$Cross == "CAST") | (BD_data$Cross == "PxCF2")  ), ]
View(BD_data)
BD_data$file_name <- do.call(paste, c(BD_data[c("ANIMAL_ID", "Slide_ID", "CellNumber")], sep = "_"))
REV <- subset(BD_data$file_name, !(BD_data$file_name %in% nonrv) ) #this returns a matrix of T OR F
length(REV)#same length as full dataframe
BD_MLH1_data$file_name <- paste( (BD_MLH1_data$file_name[!(BD_MLH1_data$file_name %in% nonrv)]) , "_REV.tif", sep="")
IFD_nMLH1 <- merge.data.frame(BD_MLH1_data, data_HVR_full, by.y = "File.ID", by.x = "file_name", all=FALSE)
View(BD_data)
View(BD_data)
BD_mice_num <- ddply(BD_data, .(file_name), summarize,
N_IFD = length(nMLH1_foci)
)
BD_mice_num
BD_mice_num <- ddply(BD_data, .(Cross), summarize,
N_IFD = length(nMLH1_foci)
)
BD_mice_num
BD_mice_num <- ddply(BD_data, .(Cross), summarize,
N_IFD = length(unique(ANIMAL_ID)),
num_obs = length(nMLH1.foci)
)
BD_mice_num <- ddply(BD_data, .(Cross), summarize,
N_IFD = length(unique(ANIMAL_ID)),
num_obs = length(nMLH1_foci)
)
BD_mice_num
View(data_HVR)
HVR_mice_num <- ddply(data_HVR, .(Cross), summarize,
N_IFD = length(unique(Animal.ID)),
num_cells = length(IFD)
)
HVR_mice_num
HVR_mice_num <- ddply(data_HVR_full, .(Cross), summarize,
N_IFD = length(unique(Animal.ID)),
num_cells = length(IFD)
)
HVR_mice_num
setwd("C:/Users/alpeterson7/Documents/HannahVR/HVRrepo/")
save.image("HVR_data_setup.RData")
View(data_HVR_full)
View(BD_data)
mouseBivClass_proportions <- ddply(BD_data, .(ANIMAL_ID), summarize,
nChr = nChr,
biv0CO = nChrWithoutXO / nChr,
biv1CO = nChrWith1XO / nChr,
biv2CO = nChrWith2XO / nChr,
biv3CO = nChrWith3.XO / nChr
)
str(BD_data)
mouseBivClass_proportions <- ddply(BD_data, .(ANIMAL_ID), summarize,
nChr = nChr,
biv0CO = as.numeric(nChrWithoutXO) / nChr,
biv1CO = as.numericn(ChrWith1XO) / nChr,
biv2CO = as.numericn(ChrWith2XO) / nChr,
biv3CO = as.numeric(nChrWith3.XO) / nChr
)
mouseBivClass_proportions <- ddply(BD_data, .(ANIMAL_ID), summarize,
nChr = nChr,
biv0CO = as.numeric(nChrWithoutXO) / nChr,
biv1CO = as.numeric(ChrWith1XO) / nChr,
biv2CO = as.numeric(ChrWith2XO) / nChr,
biv3CO = as.numeric(nChrWith3.XO) / nChr
)
mouseBivClass_proportions <- ddply(BD_data, .(ANIMAL_ID), summarize,
nChr = nChr,
biv0CO = as.numeric(nChrWithoutXO) / nChr,
biv1CO = as.numeric(nChrWith1XO) / nChr,
biv2CO = as.numeric(nChrWith2XO) / nChr,
biv3CO = as.numeric(nChrWith3.XO) / nChr
)
mouseBivClass_proportions
mouseBivClass_proportions <- ddply(BD_data, .(ANIMAL_ID), summarize,
nChr = mean(nChr),
biv0CO = mean( as.numeric(nChrWithoutXO) / nChr ),
biv1CO = mean( as.numeric(nChrWith1XO) / nChr ),
biv2CO = mean( as.numeric(nChrWith2XO) / nChr ),
biv3CO = mean( as.numeric(nChrWith3.XO) / nChr)
)
mouseBivClass_proportions
mouseBivClass_proportions <- ddply(BD_data, .(ANIMAL_ID), summarize,
Cross = Cross,
nChr = mean(nChr),
biv0CO = mean( (as.numeric(nChrWithoutXO) / nChr )*100 ),
biv1CO = mean( (as.numeric(nChrWith1XO) / nChr)*100 ),
biv2CO = mean( (as.numeric(nChrWith2XO) / nChr)*100 ),
biv3CO = mean( (as.numeric(nChrWith3.XO) / nChr)*100 )
)
mouseBivClass_proportions <- ddply(BD_data, .(ANIMAL_ID), summarize,
Cross = as.factor(Cross),
nChr = mean(nChr),
biv0CO = mean( (as.numeric(nChrWithoutXO) / nChr )*100 ),
biv1CO = mean( (as.numeric(nChrWith1XO) / nChr)*100 ),
biv2CO = mean( (as.numeric(nChrWith2XO) / nChr)*100 ),
biv3CO = mean( (as.numeric(nChrWith3.XO) / nChr)*100 )
)
mouseBivClass_proportions <- ddply(BD_data, .(ANIMAL_ID), summarize,
#  Cross = as.factor(Cross),
nChr = mean(nChr),
biv0CO = mean( (as.numeric(nChrWithoutXO) / nChr )*100 ),
biv1CO = mean( (as.numeric(nChrWith1XO) / nChr)*100 ),
biv2CO = mean( (as.numeric(nChrWith2XO) / nChr)*100 ),
biv3CO = mean( (as.numeric(nChrWith3.XO) / nChr)*100 )
)
mouseBivClass_proportions
mouseBivClass_proportions <- ddply(BD_data, .(ANIMAL_ID), summarize,
#  Cross = as.factor(Cross),
nChr = mean(nChr),
biv0CO = ( mean( (as.numeric(nChrWithoutXO) ) ) / nChr )*100 ,
biv1CO = ( mean( (as.numeric(nChrWith1XO) ) ) / nChr)*100 ,
biv2CO = ( mean( (as.numeric(nChrWith2XO) ) ) / nChr)*100 ,
biv3CO = ( mean( (as.numeric(nChrWith3.XO) ) )/ nChr)*100
)
mouseBivClass_proportions
min(mouseBivClass_proportions$biv3CO)
mouseBivClass_proportions[min(mouseBivClass_proportions$biv3CO),]
0/20
mouseBivClass_proportions <- ddply(BD_data, .(ANIMAL_ID), summarize,
#  Cross = as.factor(Cross),
nChr = mean(nChr),
biv0CO = ( mean( (as.numeric(nChrWithoutXO) ) ) / nChr ),
biv1CO = ( mean( (as.numeric(nChrWith1XO) ) ) / nChr) ,
biv2CO = ( mean( (as.numeric(nChrWith2XO) ) ) / nChr) ,
biv3CO = ( mean( (as.numeric(nChrWith3.XO) ) )/ nChr)
)
mouseBivClass_proportions[min(mouseBivClass_proportions$biv3CO),]
mouseBivClass_proportions
BD_data[min(BD_data$nChrWith3.XO), ]
BD_data[min(as.numeric(BD_data$nChrWith3.XO)), ]
12+7
tail(mouseBivClass_proportions)
19*.1
mouseBivClass_proportions <- ddply(BD_data, .(ANIMAL_ID), summarize,
#  Cross = as.factor(Cross),
nChr = mean(nChr),
nCells = lenght(nMLH1_foci),
biv0CO = ( mean( (as.numeric(nChrWithoutXO) ) ) / 19 ),
biv1CO = ( mean( (as.numeric(nChrWith1XO) ) ) / 19) ,
biv2CO = ( mean( (as.numeric(nChrWith2XO) ) ) / 19) ,
biv3CO = ( mean( (as.numeric(nChrWith3.XO) ) )/ 19)
)
mouseBivClass_proportions <- ddply(BD_data, .(ANIMAL_ID), summarize,
#  Cross = as.factor(Cross),
nChr = mean(nChr),
nCells = length(nMLH1_foci),
biv0CO = ( mean( (as.numeric(nChrWithoutXO) ) ) / 19 ),
biv1CO = ( mean( (as.numeric(nChrWith1XO) ) ) / 19) ,
biv2CO = ( mean( (as.numeric(nChrWith2XO) ) ) / 19) ,
biv3CO = ( mean( (as.numeric(nChrWith3.XO) ) )/ 19)
)
tail(mouseBivClass_proportions)
mouseBivClass_proportions <- ddply(BD_data, .(ANIMAL_ID), summarize,
#  Cross = as.factor(Cross),
nChr = mean(nChr),
nCells = length(nMLH1_foci),
biv0CO =  mean( (as.numeric(nChrWithoutXO) ) ) / nCells,
biv1CO =  mean( (as.numeric(nChrWith1XO) ) ) / nCells ,
biv2CO =  mean( (as.numeric(nChrWith2XO) ) ) / nCells ,
biv3CO =  mean( (as.numeric(nChrWith3.XO) ) )/ nCells
)
tail(mouseBivClass_proportions)
head(mouseBivClass_proportions)
